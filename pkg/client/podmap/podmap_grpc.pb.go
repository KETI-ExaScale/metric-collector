// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: client/podmap/podmap.proto

package podmap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PodMapperClient is the client API for PodMapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodMapperClient interface {
	PodPath(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	PodPID(ctx context.Context, in *Request, opts ...grpc.CallOption) (*PIDResponse, error)
	PodContainer(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ContainerResponse, error)
}

type podMapperClient struct {
	cc grpc.ClientConnInterface
}

func NewPodMapperClient(cc grpc.ClientConnInterface) PodMapperClient {
	return &podMapperClient{cc}
}

func (c *podMapperClient) PodPath(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/podmap.PodMapper/PodPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podMapperClient) PodPID(ctx context.Context, in *Request, opts ...grpc.CallOption) (*PIDResponse, error) {
	out := new(PIDResponse)
	err := c.cc.Invoke(ctx, "/podmap.PodMapper/PodPID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podMapperClient) PodContainer(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ContainerResponse, error) {
	out := new(ContainerResponse)
	err := c.cc.Invoke(ctx, "/podmap.PodMapper/PodContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodMapperServer is the server API for PodMapper service.
// All implementations must embed UnimplementedPodMapperServer
// for forward compatibility
type PodMapperServer interface {
	PodPath(context.Context, *Request) (*Response, error)
	PodPID(context.Context, *Request) (*PIDResponse, error)
	PodContainer(context.Context, *Request) (*ContainerResponse, error)
	mustEmbedUnimplementedPodMapperServer()
}

// UnimplementedPodMapperServer must be embedded to have forward compatible implementations.
type UnimplementedPodMapperServer struct {
}

func (UnimplementedPodMapperServer) PodPath(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PodPath not implemented")
}
func (UnimplementedPodMapperServer) PodPID(context.Context, *Request) (*PIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PodPID not implemented")
}
func (UnimplementedPodMapperServer) PodContainer(context.Context, *Request) (*ContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PodContainer not implemented")
}
func (UnimplementedPodMapperServer) mustEmbedUnimplementedPodMapperServer() {}

// UnsafePodMapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodMapperServer will
// result in compilation errors.
type UnsafePodMapperServer interface {
	mustEmbedUnimplementedPodMapperServer()
}

func RegisterPodMapperServer(s grpc.ServiceRegistrar, srv PodMapperServer) {
	s.RegisterService(&PodMapper_ServiceDesc, srv)
}

func _PodMapper_PodPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodMapperServer).PodPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podmap.PodMapper/PodPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodMapperServer).PodPath(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodMapper_PodPID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodMapperServer).PodPID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podmap.PodMapper/PodPID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodMapperServer).PodPID(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodMapper_PodContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodMapperServer).PodContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podmap.PodMapper/PodContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodMapperServer).PodContainer(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// PodMapper_ServiceDesc is the grpc.ServiceDesc for PodMapper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PodMapper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "podmap.PodMapper",
	HandlerType: (*PodMapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PodPath",
			Handler:    _PodMapper_PodPath_Handler,
		},
		{
			MethodName: "PodPID",
			Handler:    _PodMapper_PodPID_Handler,
		},
		{
			MethodName: "PodContainer",
			Handler:    _PodMapper_PodContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client/podmap/podmap.proto",
}
